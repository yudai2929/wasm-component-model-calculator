package component:subtractor;

interface sub {
    sub: func(a: u32, b: u32) -> u32;
}

world subtractor {
    export sub;

    import wasi:io/error@0.2.0;
    import wasi:io/streams@0.2.0;
    import wasi:cli/stdout@0.2.0;
    import wasi:random/random@0.2.0;
}


package wasi:io@0.2.0 {
  interface error {
    resource error;
  }
  interface streams {
    use error.{error};

    resource output-stream {
      blocking-write-and-flush: func(contents: list<u8>) -> result<_, stream-error>;
    }

    variant stream-error {
      last-operation-failed(error),
      closed,
    }
  }
}

package wasi:cli@0.2.0 {
  interface stdout {
    use wasi:io/streams@0.2.0.{output-stream};

    get-stdout: func() -> output-stream;
  }
}


package wasi:random@0.2.0 {
  interface random {
    get-random-u64: func() -> u64;
  }
}